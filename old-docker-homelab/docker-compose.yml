# docker-homelab
version: '3'

networks:
  net:
    external: false

services:
# ------------- traefik -------------
  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: traefik-${MAIN_NAME}
    restart: always
    ports:
      - 80:80
      - 443:443
    environment:
      - TRAEFIK_HOST=${TRAEFIK_HOST}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./apps-files/traefik/config/static.yml:/etc/traefik/traefik.yml:ro
      - ./apps-files/traefik/config/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./certs:/etc/certs:ro
    networks:
      - net
    labels:
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      
# ------------- postgres -------------
  postgres:
    container_name: postgres-${MAIN_NAME}
    build: apps-files/postgres/
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWD}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - net
    command: postgres -c ssl=on -c ssl_cert_file=/var/lib/postgresql/server.crt -c ssl_key_file=/var/lib/postgresql/server.key


# ------------- adminer -------------
  adminer:
    image: adminer:${ADMINER_VERSION}
    container_name: adminer-${MAIN_NAME}
    restart: always
    depends_on:
      - postgres
    environment: 
      - ADMINER_DEFAULT_SERVER=${DB_TYPE}
      - ADMINER_DESIGN=nette
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.routers.adminer.rule=Host(`${ADMINER_HOST}`)"
      - "traefik.http.routers.adminer.tls=true"
    networks:
      - net

# ------------- gitea -------------
  gitea:
    image: gitea/gitea:${GITEA_VERSION}
    container_name: gitea-${MAIN_NAME}
    restart: always
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - DOMAIN=${GITEA_HOST}
      - SSH_DOMAIN=${GITEA_HOST}
      - HTTP_PORT=3000
      - SSH_PORT=222
      - SSH_LISTEN_PORT=22
      - GITEA__server__ROOT_URL=${GITEA_URL}
      - GITEA__server__DOMAIN=${GITEA_HOST}
      - GITEA__database__DB_TYPE=${DB_TYPE}
      - GITEA__database__NAME=${DB_NAME}
      - GITEA__database__USER=${DB_USER}
      - GITEA__database__PASSWD=${DB_PASSWD}
      - GITEA__database__HOST=${DB_TYPE}
      - GITEA__ui__DEFAULT_THEME=gitea
      - GITEA__database__SSL_MODE=require
    networks:
      - net
    ports:
      - "3000:3000"
      - "222:22"
    labels:
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.routers.gitea.rule=Host(`${GITEA_HOST}`)"
      - "traefik.http.routers.gitea.tls=true"
    volumes:
      - ./data/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres

# ------------- portainer -------------

  portainer:
    image: portainer/portainer-ce:${PORTAINER_VERSION}
    container_name: portainer-${MAIN_NAME}
    restart: always
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_HOST}`)"
      - "traefik.http.routers.portainer.tls=true"
    volumes:
      - ./data/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro

# ------------- heimdall -------------

  heimdall:
    image: linuxserver/heimdall:${HEIMDALL_VERSION}
    container_name: heimdall-${MAIN_NAME}
    restart: always
    volumes:
      - ./data/heimdall:/config
      - ./apps-files/heimdall/www:/config/www
      - ./apps-files/heimdall/php:/config/php
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.routers.heimdall.rule=Host(`${HEIMDALL_HOST}`)"
      - "traefik.http.routers.heimdall.tls=true"

# ------------- drone -------------
  drone:
    image: drone/drone:${DRONE_VERSION}
    container_name: drone-${MAIN_NAME}
    restart: always
    environment:
      - DRONE_SERVER_HOST=${DRONE_HOST}
      - DRONE_SERVER_PROTO=https
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_GITEA_SERVER=${GITEA_HOST}
      - DRONE_GITEA_CLIENT_ID=${GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${GITEA_CLIENT_SECRET}
      - DRONE_TLS_AUTOCERT=false
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_DATABASE_DRIVER=sqlite3
      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
      - DRONE_GIT_ALWAYS_AUTH=false
    networks:
      - net
    ports:
      - "8090:80"
    volumes:
      - ./data/drone:/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.services.drone.loadbalancer.server.port=80"
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.routers.drone.rule=Host(`${DRONE_HOST}`)"
      - "traefik.http.routers.drone.tls=true"
    depends_on:
      traefik:
        condition: service_started
      gitea:
        condition: service_started

  drone-runner:
    image: drone/drone-runner-docker:latest
    container_name: droner
    restart: unless-stopped
    environment:
      - DRONE_RPC_PROTO=https
      - DRONE_RPC_HOST=drone.localhot
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_NAME="drone.localhost-runner"
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NETWORKS=net
      - DRONE_DEBUG=false
      - DRONE_TRACE=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - net
    depends_on:
      - drone


